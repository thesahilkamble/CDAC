Enter Spring

Copy "test_spring" from template projects n import it as existing Maven Project
Force Update the Maven project , to download the dependencies.

Topics : 
Why Spring 
What is it ?
Dependency Injection / IoC
Spring Bean life cycle
Bean Wiring


Why Spring ?
Simplifies overall java development
It's a great integration master (i.e allows smooth integration with existing frmworks , eg - ORM ,MVC )
Allows the developers to create loosely coupled applications
(Manages the dependencies , so that dependent objects are completely de coupled from the dependecies.)

Supplies ready made implementation of design patterns (singleton , factory , proxy , MVC , front controller ...)
Reduces Boilerplate code.

What is it ?
1. container --manages life cycle of spring beans
(spring bean --- java obj whose life cycle completely managed by SC(spring container)
eg :REST controller, controller, service,DAO.
2. framework of frameworks
It provides ready made implementation of many standard design patterns(eg :MVC,Proxy,singleton,factory, ORM ...)
It's a modular n extensive framework.

Overview of Spring frmwork modules 
refer to diagram - "Spring Reference Material\diags\spring-framework-modules.png"

Compare the layers : Refer to whiteboard diagram


Why Spring : loosely coupled application
Via : D.I / AOP


What is dependency injection(D.I) ?
In the earlier programming - 

Layers used :  JSP|Servlet---Java Bean ---DAO(Utils) -- POJO --DB 
Dependent Objs -- JavaBean , Hibernate based DAO, JDBC Based DAO
Dependencies --- DAO,HibernateUtils(SessionFactory) , DBUtils(Fixed DB connection)

All of these  are the examples of tight coupling.


Why --Any time the nature of the dependency changes , dependent obj is affected(i.e you will have to make changes in dependent obj as well !)


eg : When the dependency of Java Bean changes from JDBC Based DAO to Hibernate based DAO , in case of user authentication , javabean class has to be modified to handle invalid login case(i.e handle NoResultException)


Tight coupling is strongly un desirable , since it's difficult to maintain or extend the application.

Why it was leading to tight coupling ?
Dependent objects were managing their dependencies , in this traditional|conventional programming model.

eg : Java bean(dependent) creates the instance of DAO(dependency)


In above examples , Java bean creates the instance of DAO.
Hibernate based DAO , gets SF from HibUtils.
JDBC based DAO ,gets db connection from DBUtils.

 


What is D.I ?(Dependency injection=wiring=collaboration between dependent & dependency)
Instead of dependent objs managing their dependencies , 3rd party containers(eg : Angular / Spring/ EJB/ WC) will auto create the dependecies & make it available to dependents, directly @ run time.
This approach leads to loose coupling.

In the conventional programming , the control of managing dependencies was with dependent objects.
Now onwards , since  dependent objects are no longer managing dependencies --its called as IoC ---Inversion of control

Hollywood principle --You don't call us , we will call you....

SC --- > Dependent objs (i.e SC will create the dependencies for the dependent objs)

eg : UserController
@Autowired
private IUserService service;

In DAO layer
@AutoWired
private SessionFactory sf;


Pre requisite : Already added STS plug-in / STS 3.9.18
Steps for spring nature to Java project

Important :  Extract spring api-docs
Objective : Create Spring based Java SE  project

1. Create Maven based Java SE project with spring dependencies
2. Create dependent n dependency classes 
4. Refer : <resources> & create spring bean config xml file.(Using STS support)
5. Add namespace <beans>

To Configure SC using xml based meta data instructions
Add <bean> tags in the xml file

More details about <bean> tag 
Important Attributes of <bean> tag
1. id -mandatory attribute - refers to bean unique id
2. class --- mandatory -- Fully qualified bean class name
3. scope ---optional  . 
Default scope = singleton
In a standalone main based application   --- singleton | prototype
In web app - singleton | prototype | request | session | global session (exists ONLY under portlet based environment)
Meaning -
singleton --- SC will share single bean instance for multiple requests/demands(via ctx.getBean)
prototype -- SC creates NEW bean instance per  request/demand.

4. lazy-init --- boolean attribute. default value=false.
Applicable only to singleton beans.
By  default - SC will auto create singleton spring bean instance --- @ SC start up.

5. init-method --name of custom init method
(default pattern -- public void anyName() throws Exception{init logic})
- It will be auto called by SC after  D.I

6. destroy-method --name of custom  destroy  method
(default pattern -- public void anyName() throws Exception{..})
- It will be auto called by SC before GC of spring bean (applicable only to singleton beans)


API 
How to get ready to use spring bean from SC ?
API of BeanFactory
public <T> T getBean(String beanId,Class<T> beanClass) throws BeansException
T -  type of the spring bean



Spring bean life cycle
Types of wiring : setter Based D.I