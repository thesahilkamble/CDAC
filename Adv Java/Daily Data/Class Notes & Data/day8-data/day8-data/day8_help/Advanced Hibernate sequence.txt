Enter Advanced Hibernate

Inheritance in JPA/Hibernate
It supports 4 inheritance strategies .

First inheritance strategy : 
1.Annotation : javax.persistence.MappedSuperclass
Class level annotation , to be added on abstract or concrete super class
Hibernate will NOT generate any table for it.
One can add all common fields in this class
All other entities can extend n inherit from the common super class

Which are typically required common annotations
ID related 
creation time stamp
update time stamp
Refer -  @CreationTimestamp , @UpdateTimeStamp 
Version related (later can be added for optimistic locking)


2. Associations between Entities (HAS-A) : weaker form of association => aggregation (since Entities have a standalone life cycle , have a separate DB  Identity in form of a seaprate table n it's  PK)

Ref : Blogs E-R diagram

Category   1------* Blog Post

eg : BlogPost n Category

BlogPost : child , many, owning ( since it contains FK column)
Category : parent , one , non-owning(inverse)

Technical terms : parent/child , one side/many , (non-owning)inverse side/owning

owning side of the association -- side which contains the FK (physical mapping)
non owning(inverse) side of the asso -- side which DOES NOT conatain the FK 

2 Types of associations 
uni directional
OR
bi directional

Directionality concept exists ONLY in Object world

Uni directional association : the one in which you can navigate only from 1 side to another.
Another eg : Course 1----->* Student

Bi directional association : you can navigate the association from any side.

eg : Course 1<----->*   Student 


How To configure a Bi dir relationship?

eg : Category 1 <------> * BlogPost
(Bi dir relationship , one to many n many to one) 

Category : one , parent , non owning

BlogPost : many , child , owning (contains FK category_id ---> PK of depts table)

Steps 
Configure Entities 
1. Category : extends BaseEntity
Fields : name , description 
+private List<BlogPost> empList=new ArrayList<>();
As per Gavin King's suggestion always init collection based property to empty collection (to avoid NullPointerException. while adding /removing the child elements)
generate : setters n getters.

2. BlogPost : extends BaseEntity
Fields : title,description,content
 +
private Category chosenCategory;
Add setter n getter

Problems n solutions

1.What will happen if you don't add any association mapping annotations?
Observation : org.hibernate.MappingException is thrown !
Why ?  Hibernate CAN NOT figure out the type of association , between the entities.
Solution : Add mapping annotation .

JPA Annotations for E-R
@OneToOne
@ManyToOne
@OneToMany
@ManyToMany



2. After adding @ManyToOne n @OneToMany , no MappingException.
BUT how many tables were created by hibernate ?  3 (eg : categories,posts,categories_posts)

Is the link table  really required for establishing one to many bi dir asso ? NO
Simpler way : FK


3. Reason behind additional table : Hibernate can't identify which is owning n inverse side of the association

Solution : In a bi dir association : It's mandatory to   add mappedBy : property 
in @OneToMany .
 
Which side should it appear : inverse(eg : Category)
What should be the value of mappedBy = Name of the association property , as it appears in the owning side
eg : In Category class : add
@OneToMany(mappedBy = "chosenCategory")
private List<BlogPost> empList = new ArrayList<>();

4. How to customize name n not null constraint of FK column ?
eg : 
@JoinColumn(name="category_id",nullable=false)
private Category chosenCategory;


5. Project Tip (suggestion from Gavin King)
In case of bi-dir associations , instead of adding complex logic in DAO or Tester ,
Add helper methods in the POJO layer itself 
1. To add child entity
2. To remove a child entity
eg : In Category class ,
addBlog n removeBlog




Objectives 
1. Add a new Category 
i/p : name , description
o/p : mesg

2. Add a blog under specified category
i/p : blog details....+category id 
o/p : mesg

Will you have to explicitly call : session.persist(blog) ? 

Any simpler solution ? YES 
Use cascade option

Cascading refers to the ability to automatically propagate the state of an entity  across associations between entities. 

eg , In current scenario , if Category is deleted , since it has  a one-to-many relationship with BlogPost , you can define cascading to specify that when a Category is deleted, all of it's blog posts should be deleted as well. Or saved or updated.

Cascading in Hibernate refers to the automatic persistence of related entities. 

When a change is made to an entity, such as an save /update or delete the changes can be cascaded to related entities as well. 

Cascading can be configured using annotations

javax.persistence.CascadeType : enum 
Values :  ALL,PERSIST, MERGE, REMOVE, REFRESH, DETACH

Solution : Add a cascade type.
eg : @OneToMany (mappedBy = "chosenCategory",cascade = CascadeType.ALL)
      private List<BlogPost> posts=new ArrayList<>();



2.6 Delete category details (lab work)
i/p : category name  (unique)
o/p mesg
(Test the effect of cascade on delete)
Hint - In CategoryDaoImpl
JPQL + getSingleResult
session.delete(category);
commit



2.7 Remove blog post  from a specific category
i/p : category id , post id
o/p mesg
How ?


Problem : When you try to remove a child from the parent(using removeEmp)
Hibernate will simply nullify the FK (firing update query) BUT will NOT delete the record .
Reason : Not yet specified orphanRemoval property to hibernate.

6. Set orphanRemoval=true on the Parent-Side


Setting orphanRemoval on the parent-side guarantees the removal of children without references. 
It is good for cleaning up dependent objects that should not exist without a reference from an owner object. 


orphanRemoval : a property of @OneToMany
(Optional) Whether to apply the remove operation to entities that have been removed from the relationship and to cascade the remove operation to those entities.


6.5 Establish uni dir asso between 
BlogPost n Blogger
BlogPost *----->1 User (Blogger)

Modified Objective 
Add new blog post , along with the category n blogger
i/p : blog details...., category id , user id
o/p : mesg